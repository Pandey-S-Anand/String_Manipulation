//Bruteforce approach

class Solution {
    public String reverseWords(String str) {
        // Step 1: Trim leading/trailing spaces and split the string on one or more spaces
        String[] words = str.trim().split("\\s+");

        // Step 2: Use StringBuilder for efficient string concatenation
        StringBuilder reversedWords = new StringBuilder();

        // Step 3: Append words in reverse order
        for (int i = words.length - 1; i >= 0; i--) {
            reversedWords.append(words[i]).append(" ");
        }

        // Step 4: Trim the final string to remove the trailing space
        return reversedWords.toString().trim();
    }
}


//Optimal approach

class Solution {
    public String reverseWords(String str) {
        StringBuilder reversedSentence = new StringBuilder();

        // Start from the end of the string
        int i = str.length() - 1;

        while (i >= 0) {
            // Skip trailing or multiple spaces
            while (i >= 0 && str.charAt(i) == ' ') {
                i--;
            }

            // 'wordEndIndex' marks the end index of the current word
            int wordEndIndex = i;

            // Move left until a space is found (or beginning of string)
            while (i >= 0 && str.charAt(i) != ' ') {
                i--;
            }

            // Extract the word from (i+1) to wordEndIndex (inclusive)
            String word = str.substring(i + 1, wordEndIndex + 1);

            // Append the word followed by a space
            reversedSentence.append(word).append(" ");
        }

        // Remove the trailing space and return the result
        return reversedSentence.toString().trim();
    }
}
